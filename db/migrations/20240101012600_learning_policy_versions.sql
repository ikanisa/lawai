DROP TABLE IF EXISTS public.agent_learning_jobs cascade;

DROP TABLE IF EXISTS public.agent_policy_versions cascade;

CREATE TABLE public.agent_policy_versions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id uuid NOT NULL REFERENCES public.organizations (id) ON DELETE CASCADE,
  version_number bigint GENERATED BY DEFAULT AS IDENTITY,
  status text NOT NULL DEFAULT 'draft',
  change_set jsonb NOT NULL DEFAULT '[]'::jsonb,
  created_by uuid,
  created_at timestamptz NOT NULL DEFAULT now(),
  approved_by uuid,
  approved_at timestamptz,
  notes text
);

CREATE INDEX if NOT EXISTS idx_agent_policy_versions_org ON public.agent_policy_versions (org_id, version_number DESC);

ALTER TABLE public.agent_policy_versions enable ROW level security;

DROP POLICY if EXISTS "agent_policy_versions_policy" ON public.agent_policy_versions;

CREATE POLICY "agent_policy_versions_policy" ON public.agent_policy_versions FOR ALL USING (public.is_org_member (org_id))
WITH
  CHECK (public.is_org_member (org_id));

CREATE TABLE public.agent_learning_jobs (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id uuid NOT NULL REFERENCES public.organizations (id) ON DELETE CASCADE,
  job_type text NOT NULL,
  status text NOT NULL DEFAULT 'READY',
  payload jsonb NOT NULL DEFAULT '{}'::jsonb,
  policy_version_id uuid REFERENCES public.agent_policy_versions (id) ON DELETE SET NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX if NOT EXISTS idx_agent_learning_jobs_org ON public.agent_learning_jobs (org_id, status);

ALTER TABLE public.agent_learning_jobs enable ROW level security;

DROP POLICY if EXISTS "agent_learning_jobs_policy" ON public.agent_learning_jobs;

CREATE POLICY "agent_learning_jobs_policy" ON public.agent_learning_jobs FOR ALL USING (public.is_org_member (org_id))
WITH
  CHECK (public.is_org_member (org_id));

CREATE FUNCTION public.touch_agent_learning_jobs () returns trigger language plpgsql AS $$
begin
  new.updated_at := now();
  return new;
end;
$$;

DROP TRIGGER if EXISTS trg_touch_agent_learning_jobs ON public.agent_learning_jobs;

CREATE TRIGGER trg_touch_agent_learning_jobs before
UPDATE ON public.agent_learning_jobs FOR each ROW
EXECUTE function public.touch_agent_learning_jobs ();
