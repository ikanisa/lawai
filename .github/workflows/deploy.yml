name: Deploy

on:
  push:
    branches: [ work, main, master ]
  workflow_dispatch:

jobs:
  deployment-preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
          run_install: false
      - name: pnpm version
        run: pnpm -v
      - name: Deployment preflight
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_FEAT_AGENT_SHELL: ${{ vars.NEXT_PUBLIC_FEAT_AGENT_SHELL || 'enabled' }}
          NEXT_PUBLIC_FEAT_VOICE_REALTIME: ${{ vars.NEXT_PUBLIC_FEAT_VOICE_REALTIME || 'disabled' }}
          NEXT_PUBLIC_DRIVE_INGESTION_ENABLED: ${{ vars.NEXT_PUBLIC_DRIVE_INGESTION_ENABLED || 'disabled' }}
        run: node ./scripts/deployment-preflight.mjs

  validate-build:
    needs: deployment-preflight
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
          run_install: true
      - name: pnpm version
        run: pnpm -v
      - name: SQL lint
        run: pnpm lint:sql
      - name: Check migrations
        run: pnpm check:migrations
      - name: Lint
        run: pnpm -r lint
      - name: Typecheck
        run: pnpm -r typecheck
      - name: Test
        run: pnpm -r test
      - name: Build API
        run: pnpm --filter @apps/api build
      - name: Build Web
        run: pnpm --filter @avocat-ai/web build
      - name: Build PWA
        run: pnpm --filter @apps/pwa build
      - name: Enforce PWA bundle budgets
        run: pnpm --filter @apps/pwa bundle:check

  migrate-db:
    needs: validate-build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
          run_install: true
      - name: pnpm version
        run: pnpm -v
      - name: Apply canonical SQL migrations
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          if [ -z "${SUPABASE_DB_URL}" ]; then
            echo "Skipping migrations: SUPABASE_DB_URL not set";
            exit 0;
          fi
          set -euo pipefail
          pnpm db:migrate 2>&1 | tee migrate.log
      - name: Upload migration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migrate-logs
          path: migrate.log

  rls-smoke:
    needs: migrate-db
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_RLS_SMOKE == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
          run_install: true
      - name: pnpm version
        run: pnpm -v
      - name: RLS smoke (optional)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "RLS smoke skipped: SUPABASE_URL/SUPABASE_SERVICE_ROLE_KEY not set";
            exit 0;
          fi
          pnpm --filter @apps/ops rls-smoke
      - name: Summarize RLS smoke
        if: always()
        run: |
          echo "RLS smoke job result: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  deploy-edge:
    needs: rls-smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Deploy Edge functions (if configured)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ] || [ -z "${SUPABASE_PROJECT_REF:-}" ]; then
            echo "Skipping edge deploy: SUPABASE_ACCESS_TOKEN/PROJECT_REF not set";
            exit 0;
          fi
          # Deploy known functions; add others as needed
          supabase functions deploy provenance-alerts --project-ref "$SUPABASE_PROJECT_REF" || true
          supabase functions deploy drive-watcher --project-ref "$SUPABASE_PROJECT_REF" || true
          supabase functions deploy gdrive-watcher --project-ref "$SUPABASE_PROJECT_REF" || true

  summarize:
    needs: [validate-build, migrate-db, rls-smoke, deploy-edge]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deploy summary
        env:
          DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          RLS_URL: ${{ secrets.SUPABASE_URL }}
          RLS_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          EDGE_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          EDGE_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          db_present=false
          rls_present=false
          edge_present=false
          if [ -n "${DB_URL:-}" ]; then db_present=true; fi
          if [ -n "${RLS_URL:-}" ] && [ -n "${RLS_KEY:-}" ]; then rls_present=true; fi
          if [ -n "${EDGE_TOKEN:-}" ] && [ -n "${EDGE_REF:-}" ]; then edge_present=true; fi
          cat <<SUMMARY >> $GITHUB_STEP_SUMMARY
          ## Deploy Summary
          - validate-build: ${{ needs.validate-build.result }}
          - migrate-db: ${{ needs.migrate-db.result }}
          - rls-smoke: ${{ needs.rls-smoke.result }}
          - deploy-edge: ${{ needs.deploy-edge.result }}
          - DB URL present: ${db_present}
          - RLS secrets present: ${rls_present}
          - Edge secrets present: ${edge_present}
          SUMMARY
