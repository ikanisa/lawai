name: "Dependency Audit & Security"

on:
  push:
    branches: [ "main", "master", "work" ]
  pull_request:
    branches: [ "main", "master", "work" ]
  schedule:
    # Run weekly on Monday at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

concurrency:
  group: dependency-audit-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    name: Audit Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile --ignore-scripts

    # PNPM audit (checks npm registry for known vulnerabilities)
    - name: PNPM audit
      id: pnpm-audit
      run: |
        echo "Running pnpm audit..."
        pnpm audit --prod --audit-level=moderate || echo "audit_failed=true" >> $GITHUB_OUTPUT
      continue-on-error: true

    # Check for outdated dependencies
    - name: Check outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        pnpm outdated || true
      continue-on-error: true

    # License compliance check
    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        pnpm licenses list || echo "License check completed"
      continue-on-error: true

    # Generate dependency tree
    - name: Generate dependency tree
      run: |
        echo "Generating dependency tree..."
        pnpm list --depth=2 > dependency-tree.txt || true
        echo "Dependency tree saved to artifact"

    # Check for duplicate dependencies
    - name: Check for duplicates
      run: |
        echo "Checking for duplicate dependencies..."
        pnpm dedupe --check || echo "Duplicates may exist - consider running 'pnpm dedupe'"
      continue-on-error: true

    # Upload audit results
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-results
        path: |
          dependency-tree.txt
        retention-days: 30

    # Fail if critical/high vulnerabilities found
    - name: Check audit results
      if: steps.pnpm-audit.outputs.audit_failed == 'true'
      run: |
        echo "⚠️ Security vulnerabilities detected!"
        echo "Review the audit output above and address critical/high severity issues."
        echo ""
        echo "To fix vulnerabilities:"
        echo "1. Run 'pnpm audit' locally to see details"
        echo "2. Run 'pnpm audit --fix' to auto-fix when possible"
        echo "3. Manually update dependencies that cannot be auto-fixed"
        echo "4. Document any accepted risks in SECURITY.md"
        
        # Uncomment to fail on vulnerabilities (recommended for production)
        # exit 1

  # OSV Scanner for comprehensive vulnerability detection
  osv-scan:
    name: OSV Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          --lockfile=pnpm-lock.yaml
          --format=json
          --output=osv-results.json
      continue-on-error: true

    - name: Upload OSV results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: osv-scan-results
        path: osv-results.json
        retention-days: 30

  # Snyk vulnerability scanning (requires SNYK_TOKEN secret)
  # snyk:
  #   name: Snyk Security Scan
  #   runs-on: ubuntu-latest
  #   if: false  # Enable when Snyk token is available
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #   
  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/node@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --severity-threshold=high

  summary:
    name: Audit Summary
    runs-on: ubuntu-latest
    needs: [audit, osv-scan]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download audit artifacts
      uses: actions/download-artifact@v4
      with:
        name: dependency-audit-results
        path: ./audit-results
      continue-on-error: true

    - name: Download OSV results
      uses: actions/download-artifact@v4
      with:
        name: osv-scan-results
        path: ./osv-results
      continue-on-error: true

    - name: Generate summary
      run: |
        echo "# Dependency Audit Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Audit Status" >> $GITHUB_STEP_SUMMARY
        echo "- PNPM Audit: ${{ needs.audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- OSV Scan: ${{ needs.osv-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Actions" >> $GITHUB_STEP_SUMMARY
        echo "1. Review audit results in workflow logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Download artifacts for detailed analysis" >> $GITHUB_STEP_SUMMARY
        echo "3. Address critical and high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "4. Update dependencies using Dependabot PRs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Resources" >> $GITHUB_STEP_SUMMARY
        echo "- [SECURITY.md](./SECURITY.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Dependabot Configuration](./.github/dependabot.yml)" >> $GITHUB_STEP_SUMMARY
