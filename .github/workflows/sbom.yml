name: "Generate SBOM"

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: sbom-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile --ignore-scripts

    # Generate SBOM using CycloneDX format (industry standard)
    - name: Generate CycloneDX SBOM
      run: |
        echo "Installing CycloneDX generator..."
        pnpm add -g @cyclonedx/cyclonedx-npm
        
        echo "Generating SBOM..."
        mkdir -p sbom-output
        
        # Generate SBOM for root
        cyclonedx-npm --output-file sbom-output/sbom-root.json
        
        # Generate SBOM for each workspace (optional, can be large)
        # for workspace in apps/api apps/web apps/pwa apps/ops packages/shared packages/supabase; do
        #   if [ -d "$workspace" ]; then
        #     echo "Generating SBOM for $workspace..."
        #     cd "$workspace"
        #     cyclonedx-npm --output-file "../../sbom-output/sbom-$(basename $workspace).json"
        #     cd ../..
        #   fi
        # done
        
        echo "SBOM generation complete"

    # Generate SBOM using SPDX format (alternative format)
    - name: Generate SPDX SBOM
      run: |
        echo "Installing SPDX SBOM generator..."
        npm install -g @microsoft/sbom-tool
        
        echo "Generating SPDX SBOM..."
        sbom-tool generate \
          -b ./sbom-output \
          -bc . \
          -pn "avocat-ai-monorepo" \
          -pv "$(git describe --tags --always)" \
          -ps "ikanisa" \
          -nsb "https://github.com/ikanisa/lawai" \
          -V Verbose || echo "SPDX generation may have warnings"
      continue-on-error: true

    # Generate a human-readable dependency list
    - name: Generate dependency list
      run: |
        echo "Generating human-readable dependency list..."
        echo "# Avocat-AI Dependencies" > sbom-output/dependencies.md
        echo "" >> sbom-output/dependencies.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sbom-output/dependencies.md
        echo "Commit: ${{ github.sha }}" >> sbom-output/dependencies.md
        echo "" >> sbom-output/dependencies.md
        echo "## Production Dependencies" >> sbom-output/dependencies.md
        pnpm list --prod --depth=1 >> sbom-output/dependencies.md || true
        echo "" >> sbom-output/dependencies.md
        echo "## Development Dependencies" >> sbom-output/dependencies.md
        pnpm list --dev --depth=1 >> sbom-output/dependencies.md || true

    # Generate license report
    - name: Generate license report
      run: |
        echo "Generating license report..."
        echo "# License Report" > sbom-output/licenses.md
        echo "" >> sbom-output/licenses.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sbom-output/licenses.md
        echo "" >> sbom-output/licenses.md
        pnpm licenses list >> sbom-output/licenses.md || true

    # Create checksums for SBOM files
    - name: Generate checksums
      run: |
        cd sbom-output
        sha256sum * > checksums.txt
        cd ..

    # Upload SBOM as artifacts
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom-output/
        retention-days: 90

    # Attach SBOM to release (if this is a release)
    - name: Attach SBOM to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          sbom-output/sbom-root.json
          sbom-output/dependencies.md
          sbom-output/licenses.md
          sbom-output/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Generate summary
    - name: Generate summary
      if: always()
      run: |
        echo "# SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Files Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        ls -lh sbom-output/ >> $GITHUB_STEP_SUMMARY || true
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifact" >> $GITHUB_STEP_SUMMARY
        echo "SBOM artifacts uploaded: sbom-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Usage" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the SBOM artifact from this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Use for compliance and vulnerability tracking" >> $GITHUB_STEP_SUMMARY
        echo "3. Share with security team for review" >> $GITHUB_STEP_SUMMARY
        echo "4. Include in release documentation" >> $GITHUB_STEP_SUMMARY

  # Verify SBOM completeness
  verify-sbom:
    name: Verify SBOM
    runs-on: ubuntu-latest
    needs: generate-sbom
    if: always() && needs.generate-sbom.result == 'success'
    
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: ./sbom

    - name: Verify SBOM files
      run: |
        echo "Verifying SBOM files..."
        
        # Check if main SBOM file exists
        if [ -f "sbom/sbom-root.json" ]; then
          echo "✅ Main SBOM file found"
          # Validate JSON format
          cat sbom/sbom-root.json | jq . > /dev/null && echo "✅ SBOM JSON is valid"
        else
          echo "❌ Main SBOM file not found"
          exit 1
        fi
        
        # Check dependency list
        if [ -f "sbom/dependencies.md" ]; then
          echo "✅ Dependency list found"
          DEPS=$(cat sbom/dependencies.md | wc -l)
          echo "  Dependencies listed: $DEPS lines"
        fi
        
        # Check license report
        if [ -f "sbom/licenses.md" ]; then
          echo "✅ License report found"
        fi
        
        # Verify checksums
        if [ -f "sbom/checksums.txt" ]; then
          echo "✅ Checksums found"
          cd sbom
          sha256sum -c checksums.txt --ignore-missing
          cd ..
        fi
        
        echo ""
        echo "SBOM verification complete"

    - name: Generate verification summary
      if: always()
      run: |
        echo "# SBOM Verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "SBOM files verified successfully ✅" >> $GITHUB_STEP_SUMMARY
