name: Vercel Preview Build

on:
  pull_request:

jobs:
  preview:
    name: Auto-create Preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Derive Supabase preview branch
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          SAFE_BRANCH=$(echo "${BRANCH}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-')
          SUPABASE_BRANCH="preview-${SAFE_BRANCH}"
          echo "SUPABASE_BRANCH=${SUPABASE_BRANCH}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_BRANCH=${SUPABASE_BRANCH}" >> $GITHUB_ENV
          echo "### Supabase preview branch" >> $GITHUB_STEP_SUMMARY
          echo "Using branch \`${SUPABASE_BRANCH}\` for Supabase preview resources." >> $GITHUB_STEP_SUMMARY
      - name: Check migrations
        run: npm run check:migrations
      - name: SQL lint
        run: npm run lint:sql
      - name: Pull Vercel environment (preview)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: npx vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"
      - name: Build Vercel preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel build \
            --token="$VERCEL_TOKEN" \
            --env SUPABASE_BRANCH="$SUPABASE_BRANCH" \
            --env NEXT_PUBLIC_SUPABASE_BRANCH="$NEXT_PUBLIC_SUPABASE_BRANCH"

      - name: Deploy Vercel preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_TOKEN:-}" ]; then
            echo "VERCEL_TOKEN must be configured to publish preview deployments." >&2
            exit 1
          fi
          if [ -z "${VERCEL_ORG_ID:-}" ] || [ -z "${VERCEL_PROJECT_ID:-}" ]; then
            echo "VERCEL_ORG_ID/VERCEL_PROJECT_ID must be configured to publish preview deployments." >&2
            exit 1
          fi
          export SUPABASE_BRANCH
          export NEXT_PUBLIC_SUPABASE_BRANCH
          DEPLOY_OUTPUT=$(npx vercel deploy --prebuilt \
            --token="$VERCEL_TOKEN" \
            --yes \
            --scope="$VERCEL_ORG_ID" \
            --env SUPABASE_BRANCH="$SUPABASE_BRANCH" \
            --env NEXT_PUBLIC_SUPABASE_BRANCH="$NEXT_PUBLIC_SUPABASE_BRANCH" \
            --project "$VERCEL_PROJECT_ID" \
            --archive=tgz)
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -Eo 'https://[^ ]+\.vercel\.app' | tail -n 1)
          if [ -z "$DEPLOY_URL" ]; then
            echo "Unable to determine Vercel preview URL from deployment output." >&2
            exit 1
          fi
          echo "VERCEL_PREVIEW_URL=${DEPLOY_URL}" >> $GITHUB_ENV
          echo "### Vercel preview deployment" >> $GITHUB_STEP_SUMMARY
          echo "Published preview: ${DEPLOY_URL}" >> $GITHUB_STEP_SUMMARY
          echo "*QA action:* validate the preview and add the \`qa-signoff\` label once smoke tests pass." >> $GITHUB_STEP_SUMMARY
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vercel-build-logs
          path: .vercel/output/logs
          if-no-files-found: ignore
